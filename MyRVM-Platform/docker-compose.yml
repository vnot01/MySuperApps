services:
  # Service Aplikasi Laravel (PHP-FPM)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: myrvm_app_dev
    restart: unless-stopped
    working_dir: /var/www/html
    environment:
    #   STARTUP_COMMAND_1: sudo chown docker /proc/self/fd/{1,2}
      CONTAINER_ROLE: app # Menandai kontainer ini sebagai 'app'
      DB_HOST: ${DB_HOST:-db}
      DB_DATABASE: ${DB_DATABASE:-docker_db}
      DB_USERNAME: ${DB_USERNAME:-docker}
      DB_PASSWORD: ${DB_PASSWORD:-docker}
      # POSTGRES_USERNAME: ${DB_USERNAME:-postgres}
      # POSTGRES_USER: ${DB_USERNAME:-postgres} # Ini adalah user SUPERUSER postgres
      # POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres_password} # Ini adalah password SUPERUSER postgres
    volumes:
      - ./:/var/www/html
    networks:
      - myrvm_network
    depends_on:
      - db
      - minio

  # Service Web Server (Nginx)
  web:
    image: nginx:alpine
    container_name: myrvm_web_dev
    restart: unless-stopped
    ports:
      - "8000:80" # Akses aplikasi via http://localhost:8000
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - myrvm_network
    depends_on:
      - app

  # Service Database (PostgreSQL)
  db:
    image: postgres:latest
    container_name: myrvm_db_dev
    restart: unless-stopped
    ports:
      - "54321:5432"
    environment:
      POSTGRES_DB: ${DB_DATABASE:-myrvm_platform}
      # DB_DATABASE: ${DB_DATABASE:-myrvm_platform}
      # DB_USERNAME: ${DB_USERNAME:-myrvm_user}
      # DB_PASSWORD: ${DB_PASSWORD:-myrvm_password}
      POSTGRES_USERNAME: ${DB_USERNAME:-docker}
      POSTGRES_USER: ${DB_USERNAME:-docker}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-docker}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - myrvm_postgres_data:/var/lib/postgresql/data
      # --- TAMBAHKAN BARIS INI ---
      # - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - myrvm_network
      
    # Tambahkan healthcheck untuk memastikan PostgreSQL siap sebelum 'app' mulai
    # Ini membantu mencegah masalah koneksi database saat startup
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER:-docker}"]
      interval: 10s
      retries: 5
      
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
    #   interval: 10s

  # Service Penyimpanan Objek (MinIO)
  minio:
    image: minio/minio:latest
    container_name: myrvm_minio_dev
    restart: unless-stopped
    ports:
      - "9000:9000" # MinIO API
      - "9001:9001" # MinIO Console (UI) -> akses via http://localhost:9001
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadminsecret}
    volumes:
      - myrvm_minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - myrvm_network

  reverb:
    image: myrvm-platform-app:latest # Menggunakan image yang sama dengan 'app'
    container_name: myrvm_reverb_dev
    restart: unless-stopped
    command: php artisan reverb:start --host=0.0.0.0 --port=8080
    volumes:
      - ./:/var/www/html # Mount kode agar bisa membaca perubahan .env dan config
    ports:
      - "8080:8080" # Map port Reverb ke host untuk debugging/koneksi langsung
    networks:
      - myrvm_network
    depends_on:
      - app # Bergantung pada 'app' untuk kode Laravel

# Definisi Jaringan Kustom
networks:
  myrvm_network:
    driver: bridge

# Definisi Volume Persisten
volumes:
  myrvm_postgres_data:
    driver: local
  myrvm_minio_data:
    driver: local